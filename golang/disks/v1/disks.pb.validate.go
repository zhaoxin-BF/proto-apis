// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: disks/v1/disks.proto

package disks

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateDisksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDisksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDisksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDisksRequestMultiError, or nil if none found.
func (m *CreateDisksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDisksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CreateDisksRequest_Parent_Pattern.MatchString(m.GetParent()) {
		err := CreateDisksRequestValidationError{
			field:  "Parent",
			reason: "value does not match regex pattern \"^tenants/[^/]+/projects/[^/]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDisk() == nil {
		err := CreateDisksRequestValidationError{
			field:  "Disk",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDisk()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDisksRequestValidationError{
					field:  "Disk",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDisksRequestValidationError{
					field:  "Disk",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDisk()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDisksRequestValidationError{
				field:  "Disk",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetDiskNumber() < 1 {
		err := CreateDisksRequestValidationError{
			field:  "DiskNumber",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateDisksRequestMultiError(errors)
	}

	return nil
}

// CreateDisksRequestMultiError is an error wrapping multiple validation errors
// returned by CreateDisksRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateDisksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDisksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDisksRequestMultiError) AllErrors() []error { return m }

// CreateDisksRequestValidationError is the validation error returned by
// CreateDisksRequest.Validate if the designated constraints aren't met.
type CreateDisksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDisksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDisksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDisksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDisksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDisksRequestValidationError) ErrorName() string {
	return "CreateDisksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDisksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDisksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDisksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDisksRequestValidationError{}

var _CreateDisksRequest_Parent_Pattern = regexp.MustCompile("^tenants/[^/]+/projects/[^/]+$")

// Validate checks the field values on CreateDisksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDisksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDisksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDisksResponseMultiError, or nil if none found.
func (m *CreateDisksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDisksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDisks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateDisksResponseValidationError{
						field:  fmt.Sprintf("Disks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateDisksResponseValidationError{
						field:  fmt.Sprintf("Disks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateDisksResponseValidationError{
					field:  fmt.Sprintf("Disks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateDisksResponseMultiError(errors)
	}

	return nil
}

// CreateDisksResponseMultiError is an error wrapping multiple validation
// errors returned by CreateDisksResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDisksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDisksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDisksResponseMultiError) AllErrors() []error { return m }

// CreateDisksResponseValidationError is the validation error returned by
// CreateDisksResponse.Validate if the designated constraints aren't met.
type CreateDisksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDisksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDisksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDisksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDisksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDisksResponseValidationError) ErrorName() string {
	return "CreateDisksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDisksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDisksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDisksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDisksResponseValidationError{}

// Validate checks the field values on ListDisksRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDisksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDisksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDisksRequestMultiError, or nil if none found.
func (m *ListDisksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDisksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ListDisksRequest_Parent_Pattern.MatchString(m.GetParent()) {
		err := ListDisksRequestValidationError{
			field:  "Parent",
			reason: "value does not match regex pattern \"^tenants/[^/]+/projects/[^/]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for TagName

	// no validation rules for TagValue

	// no validation rules for HostId

	// no validation rules for MountStatus

	if len(errors) > 0 {
		return ListDisksRequestMultiError(errors)
	}

	return nil
}

// ListDisksRequestMultiError is an error wrapping multiple validation errors
// returned by ListDisksRequest.ValidateAll() if the designated constraints
// aren't met.
type ListDisksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDisksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDisksRequestMultiError) AllErrors() []error { return m }

// ListDisksRequestValidationError is the validation error returned by
// ListDisksRequest.Validate if the designated constraints aren't met.
type ListDisksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDisksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDisksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDisksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDisksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDisksRequestValidationError) ErrorName() string { return "ListDisksRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListDisksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDisksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDisksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDisksRequestValidationError{}

var _ListDisksRequest_Parent_Pattern = regexp.MustCompile("^tenants/[^/]+/projects/[^/]+$")

// Validate checks the field values on ListDisksResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDisksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDisksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDisksResponseMultiError, or nil if none found.
func (m *ListDisksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDisksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDisks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDisksResponseValidationError{
						field:  fmt.Sprintf("Disks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDisksResponseValidationError{
						field:  fmt.Sprintf("Disks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDisksResponseValidationError{
					field:  fmt.Sprintf("Disks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListDisksResponseMultiError(errors)
	}

	return nil
}

// ListDisksResponseMultiError is an error wrapping multiple validation errors
// returned by ListDisksResponse.ValidateAll() if the designated constraints
// aren't met.
type ListDisksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDisksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDisksResponseMultiError) AllErrors() []error { return m }

// ListDisksResponseValidationError is the validation error returned by
// ListDisksResponse.Validate if the designated constraints aren't met.
type ListDisksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDisksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDisksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDisksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDisksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDisksResponseValidationError) ErrorName() string {
	return "ListDisksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDisksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDisksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDisksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDisksResponseValidationError{}

// Validate checks the field values on GetDiskRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDiskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDiskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDiskRequestMultiError,
// or nil if none found.
func (m *GetDiskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDiskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := GetDiskRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDiskRequestMultiError(errors)
	}

	return nil
}

// GetDiskRequestMultiError is an error wrapping multiple validation errors
// returned by GetDiskRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDiskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDiskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDiskRequestMultiError) AllErrors() []error { return m }

// GetDiskRequestValidationError is the validation error returned by
// GetDiskRequest.Validate if the designated constraints aren't met.
type GetDiskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDiskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDiskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDiskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDiskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDiskRequestValidationError) ErrorName() string { return "GetDiskRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetDiskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDiskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDiskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDiskRequestValidationError{}

// Validate checks the field values on GetDiskResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDiskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDiskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDiskResponseMultiError, or nil if none found.
func (m *GetDiskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDiskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDisk()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDiskResponseValidationError{
					field:  "Disk",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDiskResponseValidationError{
					field:  "Disk",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDisk()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDiskResponseValidationError{
				field:  "Disk",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDiskResponseMultiError(errors)
	}

	return nil
}

// GetDiskResponseMultiError is an error wrapping multiple validation errors
// returned by GetDiskResponse.ValidateAll() if the designated constraints
// aren't met.
type GetDiskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDiskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDiskResponseMultiError) AllErrors() []error { return m }

// GetDiskResponseValidationError is the validation error returned by
// GetDiskResponse.Validate if the designated constraints aren't met.
type GetDiskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDiskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDiskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDiskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDiskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDiskResponseValidationError) ErrorName() string { return "GetDiskResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetDiskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDiskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDiskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDiskResponseValidationError{}

// Validate checks the field values on UpdateDiskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDiskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDiskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDiskRequestMultiError, or nil if none found.
func (m *UpdateDiskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDiskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDisk()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDiskRequestValidationError{
					field:  "Disk",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDiskRequestValidationError{
					field:  "Disk",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDisk()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDiskRequestValidationError{
				field:  "Disk",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDiskRequestMultiError(errors)
	}

	return nil
}

// UpdateDiskRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateDiskRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateDiskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDiskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDiskRequestMultiError) AllErrors() []error { return m }

// UpdateDiskRequestValidationError is the validation error returned by
// UpdateDiskRequest.Validate if the designated constraints aren't met.
type UpdateDiskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDiskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDiskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDiskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDiskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDiskRequestValidationError) ErrorName() string {
	return "UpdateDiskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDiskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDiskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDiskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDiskRequestValidationError{}

// Validate checks the field values on UpdateDiskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDiskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDiskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDiskResponseMultiError, or nil if none found.
func (m *UpdateDiskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDiskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDisk()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDiskResponseValidationError{
					field:  "Disk",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDiskResponseValidationError{
					field:  "Disk",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDisk()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDiskResponseValidationError{
				field:  "Disk",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDiskResponseMultiError(errors)
	}

	return nil
}

// UpdateDiskResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateDiskResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateDiskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDiskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDiskResponseMultiError) AllErrors() []error { return m }

// UpdateDiskResponseValidationError is the validation error returned by
// UpdateDiskResponse.Validate if the designated constraints aren't met.
type UpdateDiskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDiskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDiskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDiskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDiskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDiskResponseValidationError) ErrorName() string {
	return "UpdateDiskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDiskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDiskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDiskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDiskResponseValidationError{}

// Validate checks the field values on DeleteDisksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDisksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDisksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDisksRequestMultiError, or nil if none found.
func (m *DeleteDisksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDisksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DeleteDisksRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Force

	if len(errors) > 0 {
		return DeleteDisksRequestMultiError(errors)
	}

	return nil
}

// DeleteDisksRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteDisksRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteDisksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDisksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDisksRequestMultiError) AllErrors() []error { return m }

// DeleteDisksRequestValidationError is the validation error returned by
// DeleteDisksRequest.Validate if the designated constraints aren't met.
type DeleteDisksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDisksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDisksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDisksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDisksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDisksRequestValidationError) ErrorName() string {
	return "DeleteDisksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDisksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDisksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDisksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDisksRequestValidationError{}

// Validate checks the field values on DeleteDisksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDisksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDisksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDisksResponseMultiError, or nil if none found.
func (m *DeleteDisksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDisksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Retcode

	// no validation rules for Msg

	if len(errors) > 0 {
		return DeleteDisksResponseMultiError(errors)
	}

	return nil
}

// DeleteDisksResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteDisksResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteDisksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDisksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDisksResponseMultiError) AllErrors() []error { return m }

// DeleteDisksResponseValidationError is the validation error returned by
// DeleteDisksResponse.Validate if the designated constraints aren't met.
type DeleteDisksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDisksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDisksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDisksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDisksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDisksResponseValidationError) ErrorName() string {
	return "DeleteDisksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDisksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDisksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDisksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDisksResponseValidationError{}

// Validate checks the field values on AttachDiskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AttachDiskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttachDiskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AttachDiskRequestMultiError, or nil if none found.
func (m *AttachDiskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AttachDiskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AttachDiskRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetHost()) < 1 {
		err := AttachDiskRequestValidationError{
			field:  "Host",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AttachDiskRequestMultiError(errors)
	}

	return nil
}

// AttachDiskRequestMultiError is an error wrapping multiple validation errors
// returned by AttachDiskRequest.ValidateAll() if the designated constraints
// aren't met.
type AttachDiskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttachDiskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttachDiskRequestMultiError) AllErrors() []error { return m }

// AttachDiskRequestValidationError is the validation error returned by
// AttachDiskRequest.Validate if the designated constraints aren't met.
type AttachDiskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttachDiskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttachDiskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttachDiskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttachDiskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttachDiskRequestValidationError) ErrorName() string {
	return "AttachDiskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AttachDiskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttachDiskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttachDiskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttachDiskRequestValidationError{}

// Validate checks the field values on AttachDiskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AttachDiskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttachDiskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AttachDiskResponseMultiError, or nil if none found.
func (m *AttachDiskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AttachDiskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Retcode

	// no validation rules for Msg

	if len(errors) > 0 {
		return AttachDiskResponseMultiError(errors)
	}

	return nil
}

// AttachDiskResponseMultiError is an error wrapping multiple validation errors
// returned by AttachDiskResponse.ValidateAll() if the designated constraints
// aren't met.
type AttachDiskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttachDiskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttachDiskResponseMultiError) AllErrors() []error { return m }

// AttachDiskResponseValidationError is the validation error returned by
// AttachDiskResponse.Validate if the designated constraints aren't met.
type AttachDiskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttachDiskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttachDiskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttachDiskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttachDiskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttachDiskResponseValidationError) ErrorName() string {
	return "AttachDiskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AttachDiskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttachDiskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttachDiskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttachDiskResponseValidationError{}

// Validate checks the field values on DetachDiskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DetachDiskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DetachDiskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DetachDiskRequestMultiError, or nil if none found.
func (m *DetachDiskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DetachDiskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DetachDiskRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetHost()) < 1 {
		err := DetachDiskRequestValidationError{
			field:  "Host",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Force

	if len(errors) > 0 {
		return DetachDiskRequestMultiError(errors)
	}

	return nil
}

// DetachDiskRequestMultiError is an error wrapping multiple validation errors
// returned by DetachDiskRequest.ValidateAll() if the designated constraints
// aren't met.
type DetachDiskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DetachDiskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DetachDiskRequestMultiError) AllErrors() []error { return m }

// DetachDiskRequestValidationError is the validation error returned by
// DetachDiskRequest.Validate if the designated constraints aren't met.
type DetachDiskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetachDiskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetachDiskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetachDiskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetachDiskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetachDiskRequestValidationError) ErrorName() string {
	return "DetachDiskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DetachDiskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetachDiskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetachDiskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetachDiskRequestValidationError{}

// Validate checks the field values on DetachDiskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DetachDiskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DetachDiskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DetachDiskResponseMultiError, or nil if none found.
func (m *DetachDiskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DetachDiskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Retcode

	// no validation rules for Msg

	if len(errors) > 0 {
		return DetachDiskResponseMultiError(errors)
	}

	return nil
}

// DetachDiskResponseMultiError is an error wrapping multiple validation errors
// returned by DetachDiskResponse.ValidateAll() if the designated constraints
// aren't met.
type DetachDiskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DetachDiskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DetachDiskResponseMultiError) AllErrors() []error { return m }

// DetachDiskResponseValidationError is the validation error returned by
// DetachDiskResponse.Validate if the designated constraints aren't met.
type DetachDiskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetachDiskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetachDiskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetachDiskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetachDiskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetachDiskResponseValidationError) ErrorName() string {
	return "DetachDiskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DetachDiskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetachDiskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetachDiskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetachDiskResponseValidationError{}
