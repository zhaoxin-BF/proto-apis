// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: stream/v1/service.proto

package stream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StreamService_OrderList_FullMethodName  = "/stream.v1.StreamService/OrderList"
	StreamService_UploadFile_FullMethodName = "/stream.v1.StreamService/UploadFile"
	StreamService_SumData_FullMethodName    = "/stream.v1.StreamService/SumData"
)

// StreamServiceClient is the client API for StreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamServiceClient interface {
	// 服务端流式
	OrderList(ctx context.Context, in *OrderSearchParams, opts ...grpc.CallOption) (StreamService_OrderListClient, error)
	// 客户端流式
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (StreamService_UploadFileClient, error)
	// 双向流式
	SumData(ctx context.Context, opts ...grpc.CallOption) (StreamService_SumDataClient, error)
}

type streamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamServiceClient(cc grpc.ClientConnInterface) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) OrderList(ctx context.Context, in *OrderSearchParams, opts ...grpc.CallOption) (StreamService_OrderListClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[0], StreamService_OrderList_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceOrderListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamService_OrderListClient interface {
	Recv() (*OrderListResponse, error)
	grpc.ClientStream
}

type streamServiceOrderListClient struct {
	grpc.ClientStream
}

func (x *streamServiceOrderListClient) Recv() (*OrderListResponse, error) {
	m := new(OrderListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (StreamService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[1], StreamService_UploadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceUploadFileClient{stream}
	return x, nil
}

type StreamService_UploadFileClient interface {
	Send(*ImageList) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type streamServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *streamServiceUploadFileClient) Send(m *ImageList) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceUploadFileClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) SumData(ctx context.Context, opts ...grpc.CallOption) (StreamService_SumDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[2], StreamService_SumData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceSumDataClient{stream}
	return x, nil
}

type StreamService_SumDataClient interface {
	Send(*SumDataRequest) error
	Recv() (*SumDataResponse, error)
	grpc.ClientStream
}

type streamServiceSumDataClient struct {
	grpc.ClientStream
}

func (x *streamServiceSumDataClient) Send(m *SumDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceSumDataClient) Recv() (*SumDataResponse, error) {
	m := new(SumDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServiceServer is the server API for StreamService service.
// All implementations must embed UnimplementedStreamServiceServer
// for forward compatibility
type StreamServiceServer interface {
	// 服务端流式
	OrderList(*OrderSearchParams, StreamService_OrderListServer) error
	// 客户端流式
	UploadFile(StreamService_UploadFileServer) error
	// 双向流式
	SumData(StreamService_SumDataServer) error
	mustEmbedUnimplementedStreamServiceServer()
}

// UnimplementedStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamServiceServer struct {
}

func (UnimplementedStreamServiceServer) OrderList(*OrderSearchParams, StreamService_OrderListServer) error {
	return status.Errorf(codes.Unimplemented, "method OrderList not implemented")
}
func (UnimplementedStreamServiceServer) UploadFile(StreamService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedStreamServiceServer) SumData(StreamService_SumDataServer) error {
	return status.Errorf(codes.Unimplemented, "method SumData not implemented")
}
func (UnimplementedStreamServiceServer) mustEmbedUnimplementedStreamServiceServer() {}

// UnsafeStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamServiceServer will
// result in compilation errors.
type UnsafeStreamServiceServer interface {
	mustEmbedUnimplementedStreamServiceServer()
}

func RegisterStreamServiceServer(s grpc.ServiceRegistrar, srv StreamServiceServer) {
	s.RegisterService(&StreamService_ServiceDesc, srv)
}

func _StreamService_OrderList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrderSearchParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).OrderList(m, &streamServiceOrderListServer{stream})
}

type StreamService_OrderListServer interface {
	Send(*OrderListResponse) error
	grpc.ServerStream
}

type streamServiceOrderListServer struct {
	grpc.ServerStream
}

func (x *streamServiceOrderListServer) Send(m *OrderListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).UploadFile(&streamServiceUploadFileServer{stream})
}

type StreamService_UploadFileServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*ImageList, error)
	grpc.ServerStream
}

type streamServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *streamServiceUploadFileServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceUploadFileServer) Recv() (*ImageList, error) {
	m := new(ImageList)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamService_SumData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).SumData(&streamServiceSumDataServer{stream})
}

type StreamService_SumDataServer interface {
	Send(*SumDataResponse) error
	Recv() (*SumDataRequest, error)
	grpc.ServerStream
}

type streamServiceSumDataServer struct {
	grpc.ServerStream
}

func (x *streamServiceSumDataServer) Send(m *SumDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceSumDataServer) Recv() (*SumDataRequest, error) {
	m := new(SumDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamService_ServiceDesc is the grpc.ServiceDesc for StreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream.v1.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OrderList",
			Handler:       _StreamService_OrderList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadFile",
			Handler:       _StreamService_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SumData",
			Handler:       _StreamService_SumData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream/v1/service.proto",
}
